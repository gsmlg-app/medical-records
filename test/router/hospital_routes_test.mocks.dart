// Mocks generated by Mockito 5.4.6 from annotations
// in medical_records/test/router/hospital_routes_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:app_database/app_database.dart' as _i2;
import 'package:bloc/bloc.dart' as _i11;
import 'package:drift/drift.dart' as _i3;
import 'package:drift/src/runtime/executor/stream_queries.dart' as _i4;
import 'package:hospital_bloc/src/event.dart' as _i10;
import 'package:hospital_bloc/src/hospital_bloc.dart' as _i9;
import 'package:hospital_bloc/src/state.dart' as _i6;
import 'package:hospital_form_bloc/src/hospital_form_bloc.dart' as _i12;
import 'package:hospital_form_bloc/src/hospital_form_event.dart' as _i13;
import 'package:hospital_form_bloc/src/hospital_form_state.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _Fake$HospitalsTable_0 extends _i1.SmartFake
    implements _i2.$HospitalsTable {
  _Fake$HospitalsTable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$DepartmentsTable_1 extends _i1.SmartFake
    implements _i2.$DepartmentsTable {
  _Fake$DepartmentsTable_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$DoctorsTable_2 extends _i1.SmartFake implements _i2.$DoctorsTable {
  _Fake$DoctorsTable_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$TreatmentsTable_3 extends _i1.SmartFake
    implements _i2.$TreatmentsTable {
  _Fake$TreatmentsTable_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$VisitsTable_4 extends _i1.SmartFake implements _i2.$VisitsTable {
  _Fake$VisitsTable_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$ResourcesTable_5 extends _i1.SmartFake
    implements _i2.$ResourcesTable {
  _Fake$ResourcesTable_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _Fake$AppDatabaseManager_6 extends _i1.SmartFake
    implements _i2.$AppDatabaseManager {
  _Fake$AppDatabaseManager_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGeneratedDatabase_7 extends _i1.SmartFake
    implements _i3.GeneratedDatabase {
  _FakeGeneratedDatabase_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDriftDatabaseOptions_8 extends _i1.SmartFake
    implements _i3.DriftDatabaseOptions {
  _FakeDriftDatabaseOptions_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrationStrategy_9 extends _i1.SmartFake
    implements _i3.MigrationStrategy {
  _FakeMigrationStrategy_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryUpdateRules_10 extends _i1.SmartFake
    implements _i3.StreamQueryUpdateRules {
  _FakeStreamQueryUpdateRules_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnection_11 extends _i1.SmartFake
    implements _i3.DatabaseConnection {
  _FakeDatabaseConnection_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQueryExecutor_12 extends _i1.SmartFake implements _i3.QueryExecutor {
  _FakeQueryExecutor_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreamQueryStore_13 extends _i1.SmartFake
    implements _i4.StreamQueryStore {
  _FakeStreamQueryStore_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabaseConnectionUser_14 extends _i1.SmartFake
    implements _i3.DatabaseConnectionUser {
  _FakeDatabaseConnectionUser_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMigrator_15 extends _i1.SmartFake implements _i3.Migrator {
  _FakeMigrator_15(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_16<T1> extends _i1.SmartFake implements _i5.Future<T1> {
  _FakeFuture_16(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsertStatement_17<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.InsertStatement<T1, D1> {
  _FakeInsertStatement_17(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateStatement_18<T extends _i3.Table, D> extends _i1.SmartFake
    implements _i3.UpdateStatement<T, D> {
  _FakeUpdateStatement_18(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSimpleSelectStatement_19<T1 extends _i3.HasResultSet, D>
    extends _i1.SmartFake
    implements _i3.SimpleSelectStatement<T1, D> {
  _FakeSimpleSelectStatement_19(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeJoinedSelectStatement_20<FirstT extends _i3.HasResultSet, FirstD>
    extends _i1.SmartFake
    implements _i3.JoinedSelectStatement<FirstT, FirstD> {
  _FakeJoinedSelectStatement_20(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseSelectStatement_21<Row> extends _i1.SmartFake
    implements _i3.BaseSelectStatement<Row> {
  _FakeBaseSelectStatement_21(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteStatement_22<T1 extends _i3.Table, D1> extends _i1.SmartFake
    implements _i3.DeleteStatement<T1, D1> {
  _FakeDeleteStatement_22(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSelectable_23<T> extends _i1.SmartFake implements _i3.Selectable<T> {
  _FakeSelectable_23(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGenerationContext_24 extends _i1.SmartFake
    implements _i3.GenerationContext {
  _FakeGenerationContext_24(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHospitalState_25 extends _i1.SmartFake implements _i6.HospitalState {
  _FakeHospitalState_25(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHospitalFormState_26 extends _i1.SmartFake
    implements _i7.HospitalFormState {
  _FakeHospitalFormState_26(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i2.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion =>
      (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0)
          as int);

  @override
  _i2.$HospitalsTable get hospitals =>
      (super.noSuchMethod(
            Invocation.getter(#hospitals),
            returnValue: _Fake$HospitalsTable_0(
              this,
              Invocation.getter(#hospitals),
            ),
          )
          as _i2.$HospitalsTable);

  @override
  _i2.$DepartmentsTable get departments =>
      (super.noSuchMethod(
            Invocation.getter(#departments),
            returnValue: _Fake$DepartmentsTable_1(
              this,
              Invocation.getter(#departments),
            ),
          )
          as _i2.$DepartmentsTable);

  @override
  _i2.$DoctorsTable get doctors =>
      (super.noSuchMethod(
            Invocation.getter(#doctors),
            returnValue: _Fake$DoctorsTable_2(
              this,
              Invocation.getter(#doctors),
            ),
          )
          as _i2.$DoctorsTable);

  @override
  _i2.$TreatmentsTable get treatments =>
      (super.noSuchMethod(
            Invocation.getter(#treatments),
            returnValue: _Fake$TreatmentsTable_3(
              this,
              Invocation.getter(#treatments),
            ),
          )
          as _i2.$TreatmentsTable);

  @override
  _i2.$VisitsTable get visits =>
      (super.noSuchMethod(
            Invocation.getter(#visits),
            returnValue: _Fake$VisitsTable_4(this, Invocation.getter(#visits)),
          )
          as _i2.$VisitsTable);

  @override
  _i2.$ResourcesTable get resources =>
      (super.noSuchMethod(
            Invocation.getter(#resources),
            returnValue: _Fake$ResourcesTable_5(
              this,
              Invocation.getter(#resources),
            ),
          )
          as _i2.$ResourcesTable);

  @override
  _i2.$AppDatabaseManager get managers =>
      (super.noSuchMethod(
            Invocation.getter(#managers),
            returnValue: _Fake$AppDatabaseManager_6(
              this,
              Invocation.getter(#managers),
            ),
          )
          as _i2.$AppDatabaseManager);

  @override
  Iterable<_i3.TableInfo<_i3.Table, Object?>> get allTables =>
      (super.noSuchMethod(
            Invocation.getter(#allTables),
            returnValue: <_i3.TableInfo<_i3.Table, Object?>>[],
          )
          as Iterable<_i3.TableInfo<_i3.Table, Object?>>);

  @override
  List<_i3.DatabaseSchemaEntity> get allSchemaEntities =>
      (super.noSuchMethod(
            Invocation.getter(#allSchemaEntities),
            returnValue: <_i3.DatabaseSchemaEntity>[],
          )
          as List<_i3.DatabaseSchemaEntity>);

  @override
  _i3.GeneratedDatabase get attachedDatabase =>
      (super.noSuchMethod(
            Invocation.getter(#attachedDatabase),
            returnValue: _FakeGeneratedDatabase_7(
              this,
              Invocation.getter(#attachedDatabase),
            ),
          )
          as _i3.GeneratedDatabase);

  @override
  _i3.DriftDatabaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeDriftDatabaseOptions_8(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i3.DriftDatabaseOptions);

  @override
  _i3.MigrationStrategy get migration =>
      (super.noSuchMethod(
            Invocation.getter(#migration),
            returnValue: _FakeMigrationStrategy_9(
              this,
              Invocation.getter(#migration),
            ),
          )
          as _i3.MigrationStrategy);

  @override
  _i3.StreamQueryUpdateRules get streamUpdateRules =>
      (super.noSuchMethod(
            Invocation.getter(#streamUpdateRules),
            returnValue: _FakeStreamQueryUpdateRules_10(
              this,
              Invocation.getter(#streamUpdateRules),
            ),
          )
          as _i3.StreamQueryUpdateRules);

  @override
  _i3.DatabaseConnection get connection =>
      (super.noSuchMethod(
            Invocation.getter(#connection),
            returnValue: _FakeDatabaseConnection_11(
              this,
              Invocation.getter(#connection),
            ),
          )
          as _i3.DatabaseConnection);

  @override
  _i3.SqlTypes get typeMapping =>
      (super.noSuchMethod(
            Invocation.getter(#typeMapping),
            returnValue: _i8.dummyValue<_i3.SqlTypes>(
              this,
              Invocation.getter(#typeMapping),
            ),
          )
          as _i3.SqlTypes);

  @override
  _i3.QueryExecutor get executor =>
      (super.noSuchMethod(
            Invocation.getter(#executor),
            returnValue: _FakeQueryExecutor_12(
              this,
              Invocation.getter(#executor),
            ),
          )
          as _i3.QueryExecutor);

  @override
  _i4.StreamQueryStore get streamQueries =>
      (super.noSuchMethod(
            Invocation.getter(#streamQueries),
            returnValue: _FakeStreamQueryStore_13(
              this,
              Invocation.getter(#streamQueries),
            ),
          )
          as _i4.StreamQueryStore);

  @override
  _i3.DatabaseConnectionUser get resolvedEngine =>
      (super.noSuchMethod(
            Invocation.getter(#resolvedEngine),
            returnValue: _FakeDatabaseConnectionUser_14(
              this,
              Invocation.getter(#resolvedEngine),
            ),
          )
          as _i3.DatabaseConnectionUser);

  @override
  _i5.Future<int> createHospital(_i2.HospitalsCompanion? hospital) =>
      (super.noSuchMethod(
            Invocation.method(#createHospital, [hospital]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Hospital>> getAllHospitals() =>
      (super.noSuchMethod(
            Invocation.method(#getAllHospitals, []),
            returnValue: _i5.Future<List<_i2.Hospital>>.value(<_i2.Hospital>[]),
          )
          as _i5.Future<List<_i2.Hospital>>);

  @override
  _i5.Future<_i2.Hospital?> getHospitalById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getHospitalById, [id]),
            returnValue: _i5.Future<_i2.Hospital?>.value(),
          )
          as _i5.Future<_i2.Hospital?>);

  @override
  _i5.Future<bool> updateHospital(_i2.Hospital? hospital) =>
      (super.noSuchMethod(
            Invocation.method(#updateHospital, [hospital]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteHospital(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteHospital, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> createDepartment(_i2.DepartmentsCompanion? department) =>
      (super.noSuchMethod(
            Invocation.method(#createDepartment, [department]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Department>> getAllDepartments() =>
      (super.noSuchMethod(
            Invocation.method(#getAllDepartments, []),
            returnValue: _i5.Future<List<_i2.Department>>.value(
              <_i2.Department>[],
            ),
          )
          as _i5.Future<List<_i2.Department>>);

  @override
  _i5.Future<_i2.Department?> getDepartmentById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDepartmentById, [id]),
            returnValue: _i5.Future<_i2.Department?>.value(),
          )
          as _i5.Future<_i2.Department?>);

  @override
  _i5.Future<bool> updateDepartment(_i2.Department? department) =>
      (super.noSuchMethod(
            Invocation.method(#updateDepartment, [department]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteDepartment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDepartment, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> createDoctor(_i2.DoctorsCompanion? doctor) =>
      (super.noSuchMethod(
            Invocation.method(#createDoctor, [doctor]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Doctor>> getAllDoctors() =>
      (super.noSuchMethod(
            Invocation.method(#getAllDoctors, []),
            returnValue: _i5.Future<List<_i2.Doctor>>.value(<_i2.Doctor>[]),
          )
          as _i5.Future<List<_i2.Doctor>>);

  @override
  _i5.Future<_i2.Doctor?> getDoctorById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDoctorById, [id]),
            returnValue: _i5.Future<_i2.Doctor?>.value(),
          )
          as _i5.Future<_i2.Doctor?>);

  @override
  _i5.Future<List<_i2.Doctor>> getDoctorsByHospital(int? hospitalId) =>
      (super.noSuchMethod(
            Invocation.method(#getDoctorsByHospital, [hospitalId]),
            returnValue: _i5.Future<List<_i2.Doctor>>.value(<_i2.Doctor>[]),
          )
          as _i5.Future<List<_i2.Doctor>>);

  @override
  _i5.Future<bool> updateDoctor(_i2.Doctor? doctor) =>
      (super.noSuchMethod(
            Invocation.method(#updateDoctor, [doctor]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteDoctor(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDoctor, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> createTreatment(_i2.TreatmentsCompanion? treatment) =>
      (super.noSuchMethod(
            Invocation.method(#createTreatment, [treatment]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Treatment>> getAllTreatments() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTreatments, []),
            returnValue: _i5.Future<List<_i2.Treatment>>.value(
              <_i2.Treatment>[],
            ),
          )
          as _i5.Future<List<_i2.Treatment>>);

  @override
  _i5.Future<_i2.Treatment?> getTreatmentById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTreatmentById, [id]),
            returnValue: _i5.Future<_i2.Treatment?>.value(),
          )
          as _i5.Future<_i2.Treatment?>);

  @override
  _i5.Future<bool> updateTreatment(_i2.Treatment? treatment) =>
      (super.noSuchMethod(
            Invocation.method(#updateTreatment, [treatment]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteTreatment(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTreatment, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> createVisit(_i2.VisitsCompanion? visit) =>
      (super.noSuchMethod(
            Invocation.method(#createVisit, [visit]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Visit>> getAllVisits() =>
      (super.noSuchMethod(
            Invocation.method(#getAllVisits, []),
            returnValue: _i5.Future<List<_i2.Visit>>.value(<_i2.Visit>[]),
          )
          as _i5.Future<List<_i2.Visit>>);

  @override
  _i5.Future<_i2.Visit?> getVisitById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getVisitById, [id]),
            returnValue: _i5.Future<_i2.Visit?>.value(),
          )
          as _i5.Future<_i2.Visit?>);

  @override
  _i5.Future<List<_i2.Visit>> getVisitsByTreatment(int? treatmentId) =>
      (super.noSuchMethod(
            Invocation.method(#getVisitsByTreatment, [treatmentId]),
            returnValue: _i5.Future<List<_i2.Visit>>.value(<_i2.Visit>[]),
          )
          as _i5.Future<List<_i2.Visit>>);

  @override
  _i5.Future<bool> updateVisit(_i2.Visit? visit) =>
      (super.noSuchMethod(
            Invocation.method(#updateVisit, [visit]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteVisit(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteVisit, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> createResource(_i2.ResourcesCompanion? resource) =>
      (super.noSuchMethod(
            Invocation.method(#createResource, [resource]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Resource>> getAllResources() =>
      (super.noSuchMethod(
            Invocation.method(#getAllResources, []),
            returnValue: _i5.Future<List<_i2.Resource>>.value(<_i2.Resource>[]),
          )
          as _i5.Future<List<_i2.Resource>>);

  @override
  _i5.Future<_i2.Resource?> getResourceById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getResourceById, [id]),
            returnValue: _i5.Future<_i2.Resource?>.value(),
          )
          as _i5.Future<_i2.Resource?>);

  @override
  _i5.Future<List<_i2.Resource>> getResourcesByVisit(int? visitId) =>
      (super.noSuchMethod(
            Invocation.method(#getResourcesByVisit, [visitId]),
            returnValue: _i5.Future<List<_i2.Resource>>.value(<_i2.Resource>[]),
          )
          as _i5.Future<List<_i2.Resource>>);

  @override
  _i5.Future<bool> updateResource(_i2.Resource? resource) =>
      (super.noSuchMethod(
            Invocation.method(#updateResource, [resource]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<int> deleteResource(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteResource, [id]),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i3.Migrator createMigrator() =>
      (super.noSuchMethod(
            Invocation.method(#createMigrator, []),
            returnValue: _FakeMigrator_15(
              this,
              Invocation.method(#createMigrator, []),
            ),
          )
          as _i3.Migrator);

  @override
  _i5.Future<void> beforeOpen(
    _i3.QueryExecutor? executor,
    _i3.OpeningDetails? details,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#beforeOpen, [executor, details]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Stream<T> createStream<T extends Object>(
    _i4.QueryStreamFetcher<T>? stmt,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStream, [stmt]),
            returnValue: _i5.Stream<T>.empty(),
          )
          as _i5.Stream<T>);

  @override
  T alias<T, D>(_i3.ResultSetImplementation<T, D>? table, String? alias) =>
      (super.noSuchMethod(
            Invocation.method(#alias, [table, alias]),
            returnValue: _i8.dummyValue<T>(
              this,
              Invocation.method(#alias, [table, alias]),
            ),
          )
          as T);

  @override
  void markTablesUpdated(Iterable<_i3.TableInfo<_i3.Table, dynamic>>? tables) =>
      super.noSuchMethod(
        Invocation.method(#markTablesUpdated, [tables]),
        returnValueForMissingStub: null,
      );

  @override
  void notifyUpdates(Set<_i3.TableUpdate>? updates) => super.noSuchMethod(
    Invocation.method(#notifyUpdates, [updates]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Stream<Set<_i3.TableUpdate>> tableUpdates([
    _i3.TableUpdateQuery? query = const _i3.TableUpdateQuery.any(),
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#tableUpdates, [query]),
            returnValue: _i5.Stream<Set<_i3.TableUpdate>>.empty(),
          )
          as _i5.Stream<Set<_i3.TableUpdate>>);

  @override
  _i5.Future<T> doWhenOpened<T>(
    _i5.FutureOr<T> Function(_i3.QueryExecutor)? fn,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#doWhenOpened, [fn]),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#doWhenOpened, [fn]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(this, Invocation.method(#doWhenOpened, [fn])),
          )
          as _i5.Future<T>);

  @override
  _i3.InsertStatement<T, D> into<T extends _i3.Table, D>(
    _i3.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#into, [table]),
            returnValue: _FakeInsertStatement_17<T, D>(
              this,
              Invocation.method(#into, [table]),
            ),
          )
          as _i3.InsertStatement<T, D>);

  @override
  _i3.UpdateStatement<Tbl, R> update<Tbl extends _i3.Table, R>(
    _i3.TableInfo<Tbl, R>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#update, [table]),
            returnValue: _FakeUpdateStatement_18<Tbl, R>(
              this,
              Invocation.method(#update, [table]),
            ),
          )
          as _i3.UpdateStatement<Tbl, R>);

  @override
  _i3.SimpleSelectStatement<T, R> select<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#select, [table], {#distinct: distinct}),
            returnValue: _FakeSimpleSelectStatement_19<T, R>(
              this,
              Invocation.method(#select, [table], {#distinct: distinct}),
            ),
          )
          as _i3.SimpleSelectStatement<T, R>);

  @override
  _i3.JoinedSelectStatement<T, R> selectOnly<T extends _i3.HasResultSet, R>(
    _i3.ResultSetImplementation<T, R>? table, {
    bool? distinct = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            returnValue: _FakeJoinedSelectStatement_20<T, R>(
              this,
              Invocation.method(#selectOnly, [table], {#distinct: distinct}),
            ),
          )
          as _i3.JoinedSelectStatement<T, R>);

  @override
  _i3.BaseSelectStatement<_i3.TypedResult> selectExpressions(
    Iterable<_i3.Expression<Object>>? columns,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#selectExpressions, [columns]),
            returnValue: _FakeBaseSelectStatement_21<_i3.TypedResult>(
              this,
              Invocation.method(#selectExpressions, [columns]),
            ),
          )
          as _i3.BaseSelectStatement<_i3.TypedResult>);

  @override
  _i3.DeleteStatement<T, D> delete<T extends _i3.Table, D>(
    _i3.TableInfo<T, D>? table,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [table]),
            returnValue: _FakeDeleteStatement_22<T, D>(
              this,
              Invocation.method(#delete, [table]),
            ),
          )
          as _i3.DeleteStatement<T, D>);

  @override
  _i5.Future<int> customUpdate(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customUpdate,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<int> customInsert(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customInsert,
              [query],
              {#variables: variables, #updates: updates},
            ),
            returnValue: _i5.Future<int>.value(0),
          )
          as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.QueryRow>> customWriteReturning(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? updates,
    _i3.UpdateKind? updateKind,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customWriteReturning,
              [query],
              {
                #variables: variables,
                #updates: updates,
                #updateKind: updateKind,
              },
            ),
            returnValue: _i5.Future<List<_i3.QueryRow>>.value(<_i3.QueryRow>[]),
          )
          as _i5.Future<List<_i3.QueryRow>>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelect(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelect,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_23<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelect,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i3.Selectable<_i3.QueryRow>);

  @override
  _i3.Selectable<_i3.QueryRow> customSelectQuery(
    String? query, {
    List<_i3.Variable<Object>>? variables = const [],
    Set<_i3.ResultSetImplementation<dynamic, dynamic>>? readsFrom = const {},
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #customSelectQuery,
              [query],
              {#variables: variables, #readsFrom: readsFrom},
            ),
            returnValue: _FakeSelectable_23<_i3.QueryRow>(
              this,
              Invocation.method(
                #customSelectQuery,
                [query],
                {#variables: variables, #readsFrom: readsFrom},
              ),
            ),
          )
          as _i3.Selectable<_i3.QueryRow>);

  @override
  _i5.Future<void> customStatement(String? statement, [List<dynamic>? args]) =>
      (super.noSuchMethod(
            Invocation.method(#customStatement, [statement, args]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function()? action, {
    bool? requireNew = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #transaction,
              [action],
              {#requireNew: requireNew},
            ),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #transaction,
                      [action],
                      {#requireNew: requireNew},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(
                    #transaction,
                    [action],
                    {#requireNew: requireNew},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<T> exclusively<T>(_i5.Future<T> Function()? action) =>
      (super.noSuchMethod(
            Invocation.method(#exclusively, [action]),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#exclusively, [action]),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(#exclusively, [action]),
                ),
          )
          as _i5.Future<T>);

  @override
  _i5.Future<void> batch(_i5.FutureOr<void> Function(_i3.Batch)? runInBatch) =>
      (super.noSuchMethod(
            Invocation.method(#batch, [runInBatch]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<T> runWithInterceptor<T>(
    _i5.Future<T> Function()? action, {
    required _i3.QueryInterceptor? interceptor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #runWithInterceptor,
              [action],
              {#interceptor: interceptor},
            ),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(
                      #runWithInterceptor,
                      [action],
                      {#interceptor: interceptor},
                    ),
                  ),
                  (T v) => _i5.Future<T>.value(v),
                ) ??
                _FakeFuture_16<T>(
                  this,
                  Invocation.method(
                    #runWithInterceptor,
                    [action],
                    {#interceptor: interceptor},
                  ),
                ),
          )
          as _i5.Future<T>);

  @override
  _i3.GenerationContext $write(
    _i3.Component? component, {
    bool? hasMultipleTables,
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$write,
              [component],
              {#hasMultipleTables: hasMultipleTables, #startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_24(
              this,
              Invocation.method(
                #$write,
                [component],
                {
                  #hasMultipleTables: hasMultipleTables,
                  #startIndex: startIndex,
                },
              ),
            ),
          )
          as _i3.GenerationContext);

  @override
  _i3.GenerationContext $writeInsertable(
    _i3.TableInfo<_i3.Table, dynamic>? table,
    _i3.Insertable<dynamic>? insertable, {
    int? startIndex,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #$writeInsertable,
              [table, insertable],
              {#startIndex: startIndex},
            ),
            returnValue: _FakeGenerationContext_24(
              this,
              Invocation.method(
                #$writeInsertable,
                [table, insertable],
                {#startIndex: startIndex},
              ),
            ),
          )
          as _i3.GenerationContext);

  @override
  String $expandVar(int? start, int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#$expandVar, [start, amount]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#$expandVar, [start, amount]),
            ),
          )
          as String);
}

/// A class which mocks [HospitalBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHospitalBloc extends _i1.Mock implements _i9.HospitalBloc {
  MockHospitalBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.HospitalState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeHospitalState_25(this, Invocation.getter(#state)),
          )
          as _i6.HospitalState);

  @override
  _i5.Stream<_i6.HospitalState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i6.HospitalState>.empty(),
          )
          as _i5.Stream<_i6.HospitalState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i10.HospitalEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i10.HospitalEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.HospitalState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i10.HospitalEvent>(
    _i11.EventHandler<E, _i6.HospitalState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i11.Transition<_i10.HospitalEvent, _i6.HospitalState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i11.Change<_i6.HospitalState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [HospitalFormBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHospitalFormBloc extends _i1.Mock implements _i12.HospitalFormBloc {
  MockHospitalFormBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isFormValid =>
      (super.noSuchMethod(Invocation.getter(#isFormValid), returnValue: false)
          as bool);

  @override
  Map<String, String?> get formData =>
      (super.noSuchMethod(
            Invocation.getter(#formData),
            returnValue: <String, String?>{},
          )
          as Map<String, String?>);

  @override
  _i7.HospitalFormState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeHospitalFormState_26(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i7.HospitalFormState);

  @override
  _i5.Stream<_i7.HospitalFormState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i7.HospitalFormState>.empty(),
          )
          as _i5.Stream<_i7.HospitalFormState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i13.HospitalFormEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i13.HospitalFormEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i7.HospitalFormState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i13.HospitalFormEvent>(
    _i11.EventHandler<E, _i7.HospitalFormState>? handler, {
    _i11.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i11.Transition<_i13.HospitalFormEvent, _i7.HospitalFormState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i11.Change<_i7.HospitalFormState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
